plugins {
    id 'java'
}

group = 'io.automationhacks'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation 'com.slack.api:slack-api-client:1.43.1'
    testImplementation 'io.rest-assured:rest-assured:5.5.0'
    testImplementation 'org.testng:testng:7.10.2'
    testImplementation 'com.epam.reportportal:agent-java-testng:5.4.2'
    testImplementation 'com.epam.reportportal:logger-java-logback:5.2.2'
}

test {
    useTestNG() {
        useDefaultListeners = true
        listeners << 'io.automationhacks.testinfra.alerting.TestListener'
        listeners << 'com.epam.reportportal.testng.ReportPortalTestNGListener'
        parallel = 'methods'
        threadCount = 6

        includeGroups System.getProperty('includedGroups', '')
        excludeGroups System.getProperty('excludedGroups', '')
    }

    // pass system properties from commandline
    systemProperties = System.properties

    // show stdout and stderr of test JVM on console
    testLogging.showStandardStreams = true
}

task runTests() {
    doLast {
        def groups = System.getProperty('groups', '').split(',')

        if (groups.size() < 2) {
            throw new GradleException('At least 2 groups must be specified. Use -Dgroups=group1,group2,...')
        }

        def testClasses = sourceSets.test.output.classesDirs.asFileTree.matching {
            include '**/*Test.class'
        }.files.collect { it.absolutePath.replaceAll('\\\\', '/') }

        javaexec {
            main = 'org.testng.TestNG'
            classpath = sourceSets.test.runtimeClasspath
            args = ['-testclass', testClasses.join(','), '-groups', groups.join(',')]
        }
    }
}

task generateTestListing(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set('io.automationhacks.testinfra.listing.TestListing')
}

task copyWebResources(type: Copy) {
    from 'src/main/resources/static'
    into 'build/resources/main/static'
}

processResources.finalizedBy generateTestListing
generateTestListing.finalizedBy copyWebResources
test.dependsOn(copyWebResources)